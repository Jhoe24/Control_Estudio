import customtkinter as ctk
from tkinter import filedialog, messagebox
import threading
import os
from pathlib import Path

# Importar los migradores
from migrador_alm import MigradorALM
from migrador_cc import MigradorCC
from migrador_dct import MigradorDCT
from migrador_ins import MigradorINS
from migrador_sea import MigradorSEA

class SistemaMigracionApp:
    def __init__(self):
        # Configurar el tema y la apariencia
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")

        # Crear la ventana principal
        self.root = ctk.CTk()
        self.root.title("üöÄ Sistema de Migraci√≥n de Datos")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)
        
        # Colores personalizados modernos (usando colores v√°lidos)
        self.colors = {
            'primary': "#0066CC",
            'primary_dark': "#004499", 
            'secondary': "#00D4AA",
            'accent': "#FF6B6B",
            'success': "#4ECDC4",
            'warning': "#FFE66D",
            'error': "#FF6B6B",
            'surface': "#1A1A1A",
            'surface_light': "#2D2D2D",
            'text_primary': "#FFFFFF",
            'text_secondary': "#B0B0B0",
            'background': ("white", "gray10"),
            'frame_bg': ("gray95", "gray15"),
            'card_bg': ("gray90", "gray20")
        }

        # Variables
        self.ruta_bd = ctk.StringVar()
        self.tabla_seleccionada = ctk.StringVar(value="ALM")
        self.progreso_visible = False
        self.animation_progress = 0

        # Configurar la ventana
        self.configurar_ventana()
        self.crear_interfaz()

    def configurar_ventana(self):
        """Configurar la ventana principal con estilo moderno"""
        # Centrar la ventana en la pantalla
        self.root.update_idletasks()
        width = 900
        height = 600
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")

        # Configurar el grid principal
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_rowconfigure(0, weight=1)

    def crear_interfaz(self):
        """Crear todos los elementos de la interfaz moderna"""
        # Crear contenedor principal
        self.main_container = ctk.CTkFrame(
            self.root,
            corner_radius=0,
            fg_color=self.colors['background']
        )
        self.main_container.grid(row=0, column=0, sticky="nsew")
        self.main_container.grid_columnconfigure(0, weight=1)
        self.main_container.grid_rowconfigure(1, weight=1)

        # Header moderno
        self.crear_header(self.main_container, 0)

        # Contenido principal con scroll
        self.crear_contenido_principal(self.main_container, 1)

        # Footer con informaci√≥n
        self.crear_footer(self.main_container, 2)

    def crear_header(self, parent, row):
        """Crear header moderno y atractivo"""
        header_frame = ctk.CTkFrame(
            parent,
            height=120,
            corner_radius=0,
            fg_color=("white", "gray20")
        )
        header_frame.grid(row=row, column=0, sticky="ew")
        header_frame.grid_propagate(False)
        header_frame.grid_columnconfigure(1, weight=1)

        # Icono principal
        icon_frame = ctk.CTkFrame(
            header_frame,
            width=80,
            height=80,
            corner_radius=40,
            fg_color=self.colors['primary']
        )
        icon_frame.grid(row=0, column=0, padx=30, pady=20)
        icon_frame.grid_propagate(False)

        icon_label = ctk.CTkLabel(
            icon_frame,
            text="üîÑ",
            font=ctk.CTkFont(size=36),
            text_color="white"
        )
        icon_label.place(relx=0.5, rely=0.5, anchor="center")

        # Informaci√≥n del t√≠tulo
        title_frame = ctk.CTkFrame(header_frame, fg_color=("white", "gray20"))
        title_frame.grid(row=0, column=1, sticky="ew", padx=20, pady=20)
        title_frame.grid_columnconfigure(0, weight=1)

        # T√≠tulo principal
        main_title = ctk.CTkLabel(
            title_frame,
            text="Sistema de Migraci√≥n de Datos",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=("gray20", "white"),
            anchor="w"
        )
        main_title.grid(row=0, column=0, sticky="ew")

        # Subt√≠tulo
        subtitle = ctk.CTkLabel(
            title_frame,
            text="Migraci√≥n de Excel a SQLite3 | R√°pido ‚Ä¢ Seguro ‚Ä¢ Confiable",
            font=ctk.CTkFont(size=14),
            text_color=("gray50", "gray70"),
            anchor="w"
        )
        subtitle.grid(row=1, column=0, sticky="ew", pady=(5, 0))

        # Badge de estado
        status_frame = ctk.CTkFrame(
            header_frame,
            width=120,
            height=35,
            corner_radius=20,
            fg_color=self.colors['success']
        )
        status_frame.grid(row=0, column=2, padx=30, pady=20, sticky="e")
        status_frame.grid_propagate(False)

        status_label = ctk.CTkLabel(
            status_frame,
            text="‚úì Sistema Listo",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="white"
        )
        status_label.place(relx=0.5, rely=0.5, anchor="center")

    def crear_contenido_principal(self, parent, row):
        """Crear el contenido principal con scroll"""
        # Contenedor con scroll moderno
        self.scrollable_frame = ctk.CTkScrollableFrame(
            parent,
            corner_radius=0,
            fg_color=self.colors['background'],
            scrollbar_button_color=("gray80", "gray30"),
            scrollbar_button_hover_color=("gray70", "gray40")
        )
        self.scrollable_frame.grid(row=row, column=0, sticky="nsew", padx=0, pady=0)
        self.scrollable_frame.grid_columnconfigure(0, weight=1)

        # Layout en dos columnas para mejor aprovechamiento del espacio
        content_container = ctk.CTkFrame(
            self.scrollable_frame,
            fg_color=self.colors['background']
        )
        content_container.grid(row=0, column=0, sticky="ew", padx=30, pady=20)
        content_container.grid_columnconfigure((0, 1), weight=1)

        # Columna izquierda: Configuraci√≥n
        left_column = ctk.CTkFrame(content_container, corner_radius=20, fg_color=self.colors['frame_bg'])
        left_column.grid(row=0, column=0, sticky="nsew", padx=(0, 15), pady=0)
        left_column.grid_columnconfigure(0, weight=1)

        # Columna derecha: Estado y acciones
        right_column = ctk.CTkFrame(content_container, corner_radius=20, fg_color=self.colors['frame_bg'])
        right_column.grid(row=0, column=1, sticky="nsew", padx=(15, 0), pady=0)
        right_column.grid_columnconfigure(0, weight=1)

        # Llenar columnas
        self.crear_seccion_configuracion(left_column)
        self.crear_seccion_acciones(right_column)

        # Secci√≥n de progreso (full width)
        self.crear_seccion_progreso_moderna(content_container, 1)

        # √Årea de resultados (full width)
        self.crear_area_resultados_moderna(content_container, 2)

    def crear_seccion_configuracion(self, parent):
        """Crear secci√≥n de configuraci√≥n moderna"""
        # T√≠tulo de secci√≥n
        section_header = ctk.CTkFrame(parent, height=50, corner_radius=15, fg_color=self.colors['primary'])
        section_header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20, 0))
        section_header.grid_propagate(False)

        header_label = ctk.CTkLabel(
            section_header,
            text="‚öôÔ∏è Configuraci√≥n",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="white"
        )
        header_label.place(relx=0.5, rely=0.5, anchor="center")

        # Selecci√≥n de base de datos
        self.crear_seccion_bd_moderna(parent, 1)

        # Selecci√≥n de tabla
        self.crear_seccion_tabla_moderna(parent, 2)

    def crear_seccion_bd_moderna(self, parent, row):
        """Crear secci√≥n de BD con dise√±o moderno"""
        bd_container = ctk.CTkFrame(parent, fg_color=self.colors['frame_bg'])
        bd_container.grid(row=row, column=0, sticky="ew", padx=20, pady=15)
        bd_container.grid_columnconfigure(0, weight=1)

        # T√≠tulo
        bd_title = ctk.CTkLabel(
            bd_container,
            text="üìÅ Base de Datos",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=("gray20", "white"),
            anchor="w"
        )
        bd_title.grid(row=0, column=0, sticky="w", pady=(10, 10), padx=10)

        # Entry moderno
        self.entry_bd = ctk.CTkEntry(
            bd_container,
            textvariable=self.ruta_bd,
            placeholder_text="üîç Seleccione la base de datos SQLite3...",
            height=45,
            font=ctk.CTkFont(size=13),
            corner_radius=12,
            border_width=2,
            state="readonly"
        )
        self.entry_bd.grid(row=1, column=0, sticky="ew", pady=(0, 10), padx=10)

        # Bot√≥n moderno
        self.btn_seleccionar_bd = ctk.CTkButton(
            bd_container,
            text="üìÇ Examinar",
            command=self.seleccionar_bd,
            height=45,
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=12,
            fg_color=self.colors['secondary'],
            hover_color=self.colors['primary'],
            border_width=0
        )
        self.btn_seleccionar_bd.grid(row=2, column=0, sticky="ew", padx=10, pady=(0, 10))

    def crear_seccion_tabla_moderna(self, parent, row):
        """Crear secci√≥n de tabla con cards modernas"""
        tabla_container = ctk.CTkFrame(parent, fg_color=self.colors['frame_bg'])
        tabla_container.grid(row=row, column=0, sticky="ew", padx=20, pady=15)
        tabla_container.grid_columnconfigure(0, weight=1)

        # T√≠tulo
        tabla_title = ctk.CTkLabel(
            tabla_container,
            text="üìä Tabla a Migrar",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=("gray20", "white"),
            anchor="w"
        )
        tabla_title.grid(row=0, column=0, sticky="w", pady=(10, 15), padx=10)

        # Cards de opciones
        tablas = [
            ("ALM", "üë•", "Alumnos", "Informaci√≥n estudiantil"),
            ("CC", "üìö", "Carga Curricular", "Materias y planes"),
            ("DCT", "üë®‚Äçüè´", "Docentes", "Informaci√≥n profesorado"),
            ("INS", "üìù", "Inscripciones", "Registros acad√©micos"),
            ("SEA", "üè´", "Secciones", "Grupos y secciones")
        ]

        for i, (codigo, icono, nombre, desc) in enumerate(tablas):
            self.crear_tabla_card(tabla_container, i+1, codigo, icono, nombre, desc)

    def crear_tabla_card(self, parent, row, codigo, icono, nombre, desc):
        """Crear card individual para cada tabla"""
        # Frame principal de la card
        card_frame = ctk.CTkFrame(
            parent,
            height=70,
            corner_radius=12,
            fg_color=self.colors['card_bg'],
            border_width=2,
            border_color=self.colors['card_bg']
        )
        card_frame.grid(row=row, column=0, sticky="ew", pady=3, padx=10)
        card_frame.grid_propagate(False)
        card_frame.grid_columnconfigure(1, weight=1)

        # Radio button
        radio = ctk.CTkRadioButton(
            card_frame,
            text="",
            variable=self.tabla_seleccionada,
            value=codigo,
            width=20,
            height=20,
            radiobutton_width=20,
            radiobutton_height=20,
            command=lambda: self.seleccionar_tabla_card(card_frame, codigo)
        )
        radio.grid(row=0, column=0, padx=15, pady=0, sticky="w")

        # Icono
        icon_label = ctk.CTkLabel(
            card_frame,
            text=icono,
            font=ctk.CTkFont(size=24),
            width=40
        )
        icon_label.grid(row=0, column=1, padx=(10, 0), pady=0, sticky="w")

        # Informaci√≥n
        info_frame = ctk.CTkFrame(card_frame, fg_color=self.colors['card_bg'])
        info_frame.grid(row=0, column=2, sticky="ew", padx=10, pady=10)
        info_frame.grid_columnconfigure(0, weight=1)

        name_label = ctk.CTkLabel(
            info_frame,
            text=nombre,
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=("gray20", "white"),
            anchor="w"
        )
        name_label.grid(row=0, column=0, sticky="ew")

        desc_label = ctk.CTkLabel(
            info_frame,
            text=desc,
            font=ctk.CTkFont(size=11),
            text_color=("gray50", "gray60"),
            anchor="w"
        )
        desc_label.grid(row=1, column=0, sticky="ew")

        # Almacenar referencia para animaci√≥n
        setattr(self, f"card_{codigo}", card_frame)

        # Seleccionar ALM por defecto
        if codigo == "ALM":
            self.seleccionar_tabla_card(card_frame, codigo)

    def seleccionar_tabla_card(self, card_frame, codigo):
        """Animar selecci√≥n de tabla"""
        # Resetear todas las cards
        for tabla_codigo in ["ALM", "CC", "DCT", "INS", "SEA"]:
            if hasattr(self, f"card_{tabla_codigo}"):
                card = getattr(self, f"card_{tabla_codigo}")
                card.configure(
                    border_color=self.colors['card_bg'],
                    fg_color=self.colors['card_bg']
                )

        # Resaltar card seleccionada
        card_frame.configure(
            border_color=self.colors['primary'],
            fg_color=self.colors['card_bg']
        )

    def crear_seccion_acciones(self, parent):
        """Crear secci√≥n de acciones y estado"""
        # T√≠tulo de secci√≥n
        section_header = ctk.CTkFrame(parent, height=50, corner_radius=15, fg_color=self.colors['accent'])
        section_header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20, 0))
        section_header.grid_propagate(False)

        header_label = ctk.CTkLabel(
            section_header,
            text="üéØ Acciones",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="white"
        )
        header_label.place(relx=0.5, rely=0.5, anchor="center")

        # Informaci√≥n del sistema
        self.crear_info_sistema(parent, 1)

        # Botones de acci√≥n
        self.crear_botones_modernos(parent, 2)

    def crear_info_sistema(self, parent, row):
        """Crear panel de informaci√≥n del sistema"""
        info_container = ctk.CTkFrame(parent, fg_color=self.colors['frame_bg'])
        info_container.grid(row=row, column=0, sticky="ew", padx=20, pady=15)

        # Estado del sistema
        status_frame = ctk.CTkFrame(
            info_container,
            height=100,
            width=400,
            corner_radius=12,
            fg_color=("gray85", "gray25")
        )
        status_frame.grid(row=0, column=0, sticky="ew", pady=(10, 10), padx=10)
        status_frame.grid_propagate(False)
        status_frame.grid_columnconfigure(1, weight=1)

        # Icono de estado
        status_icon = ctk.CTkLabel(
            status_frame,
            text="üí°",
            font=ctk.CTkFont(size=24)
        )
        status_icon.grid(row=0, column=0, padx=15, pady=0)

        # Informaci√≥n de estado
        status_info = ctk.CTkFrame(status_frame, fg_color=("gray85", "gray25"))
        status_info.grid(row=0, column=1, sticky="ew", padx=(0, 15), pady=15)

        self.status_title = ctk.CTkLabel(
            status_info,
            text="Sistema Preparado",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color=("gray20", "white"),
            anchor="w"
        )
        self.status_title.grid(row=0, column=0, sticky="ew")

        self.status_desc = ctk.CTkLabel(
            status_info,
            text="Configurar base de datos y tabla",
            font=ctk.CTkFont(size=11),
            text_color=("gray50", "gray60"),
            anchor="w",
        )
        self.status_desc.grid(row=1, column=0, sticky="ew")

        # Tips r√°pidos
        tips_frame = ctk.CTkFrame(
            info_container,
            corner_radius=12,
            fg_color=("gray50", "gray60")
        )
        tips_frame.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 10))

        tips_label = ctk.CTkLabel(
            tips_frame,
            text="üí° Tip: Aseg√∫rese de tener los archivos Excel en la carpeta correcta",
            font=ctk.CTkFont(size=12),
            text_color=("#ffffff", "#ffffff"),
            wraplength=250
        )
        tips_label.grid(row=0, column=0, padx=15, pady=12)

    def crear_botones_modernos(self, parent, row):
        """Crear botones con dise√±o moderno"""
        buttons_container = ctk.CTkFrame(parent, fg_color=self.colors['frame_bg'])
        buttons_container.grid(row=row, column=0, sticky="ew", padx=20, pady=15)
        buttons_container.grid_columnconfigure(0, weight=1)

        # Bot√≥n principal - Migrar
        self.btn_migrar = ctk.CTkButton(
            buttons_container,
            text="üöÄ Iniciar Migraci√≥n",
            command=self.iniciar_migracion,
            height=55,
            font=ctk.CTkFont(size=16, weight="bold"),
            corner_radius=15,
            fg_color=self.colors['success'],
            hover_color=self.colors['primary'],
            border_width=0
        )
        self.btn_migrar.grid(row=0, column=0, sticky="ew", pady=(10, 10), padx=10)

        # Frame para botones secundarios
        secondary_buttons = ctk.CTkFrame(buttons_container, fg_color=self.colors['frame_bg'])
        secondary_buttons.grid(row=1, column=0, sticky="ew", padx=10)
        secondary_buttons.grid_columnconfigure((0, 1), weight=1)

        # Bot√≥n limpiar
        btn_limpiar = ctk.CTkButton(
            secondary_buttons,
            text="üóëÔ∏è Limpiar",
            command=self.limpiar_campos,
            height=45,
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=12,
            fg_color=self.colors['warning'],
            hover_color=self.colors['accent'],
            text_color="white"
        )
        btn_limpiar.grid(row=0, column=0, sticky="ew", padx=(0, 5), pady=(0, 10))

        # Bot√≥n salir
        btn_salir = ctk.CTkButton(
            secondary_buttons,
            text="‚ùå Salir",
            command=self.salir_aplicacion,
            height=45,
            font=ctk.CTkFont(size=14, weight="bold"),
            corner_radius=12,
            fg_color=self.colors['error'],
            hover_color="#CC0000",
            text_color="white"
        )
        btn_salir.grid(row=0, column=1, sticky="ew", padx=(5, 0), pady=(0, 10))

    def crear_seccion_progreso_moderna(self, parent, row):
        """Crear secci√≥n de progreso moderna"""
        self.progress_container = ctk.CTkFrame(parent, corner_radius=20, fg_color=self.colors['frame_bg'])
        self.progress_container.grid(row=row, column=0, columnspan=2, sticky="ew", padx=0, pady=20)
        self.progress_container.grid_remove()  # Ocultar inicialmente
        self.progress_container.grid_columnconfigure(0, weight=1)

        # Header del progreso
        progress_header = ctk.CTkFrame(
            self.progress_container,
            height=60,
            corner_radius=15,
            fg_color=self.colors['primary']
        )
        progress_header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20, 0))
        progress_header.grid_propagate(False)

        self.progress_title = ctk.CTkLabel(
            progress_header,
            text="‚ö° Migraci√≥n en Progreso...",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="white"
        )
        self.progress_title.place(relx=0.5, rely=0.5, anchor="center")

        # Contenido del progreso
        progress_content = ctk.CTkFrame(self.progress_container, fg_color=self.colors['frame_bg'])
        progress_content.grid(row=1, column=0, sticky="ew", padx=20, pady=20)
        progress_content.grid_columnconfigure(0, weight=1)

        # Barra de progreso moderna
        self.progress_bar = ctk.CTkProgressBar(
            progress_content,
            width=400,
            height=25,
            corner_radius=15,
            progress_color=self.colors['success'],
            fg_color=("gray80", "gray30")
        )
        self.progress_bar.grid(row=0, column=0, sticky="ew", pady=(10, 15), padx=10)

        # Labels de estado
        self.progress_percentage = ctk.CTkLabel(
            progress_content,
            text="0%",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color=("gray20", "white")
        )
        self.progress_percentage.grid(row=1, column=0, pady=(0, 5))

        self.progress_label = ctk.CTkLabel(
            progress_content,
            text="Preparando migraci√≥n...",
            font=ctk.CTkFont(size=14),
            text_color=("gray50", "gray60")
        )
        self.progress_label.grid(row=2, column=0, pady=(0, 10))

    def crear_area_resultados_moderna(self, parent, row):
        """Crear √°rea de resultados moderna"""
        self.resultados_container = ctk.CTkFrame(parent, corner_radius=20, fg_color=self.colors['frame_bg'])
        self.resultados_container.grid(row=row, column=0, columnspan=2, sticky="ew", padx=0, pady=(0, 20))
        self.resultados_container.grid_remove()  # Ocultar inicialmente
        self.resultados_container.grid_columnconfigure(0, weight=1)

        # Header de resultados
        self.resultado_header = ctk.CTkFrame(
            self.resultados_container,
            height=60,
            corner_radius=15,
            fg_color=self.colors['success']
        )
        self.resultado_header.grid(row=0, column=0, sticky="ew", padx=20, pady=(20, 0))
        self.resultado_header.grid_propagate(False)

        self.resultado_titulo = ctk.CTkLabel(
            self.resultado_header,
            text="‚úÖ Migraci√≥n Completada",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="white"
        )
        self.resultado_titulo.place(relx=0.5, rely=0.5, anchor="center")

        # Contenido de resultados
        resultados_content = ctk.CTkFrame(self.resultados_container, fg_color=self.colors['frame_bg'])
        resultados_content.grid(row=1, column=0, sticky="ew", padx=20, pady=20)
        resultados_content.grid_columnconfigure(0, weight=1)

        # Textbox de resultados
        self.resultado_texto = ctk.CTkTextbox(
            resultados_content,
            height=200,
            font=ctk.CTkFont(size=12, family="Consolas"),
            corner_radius=12,
            fg_color=("gray95", "gray20"),
            text_color=("gray20", "gray80"),
            scrollbar_button_color=("gray70", "gray30")
        )
        self.resultado_texto.grid(row=0, column=0, sticky="ew", padx=10, pady=10)

    def crear_footer(self, parent, row):
        """Crear footer moderno"""
        footer_frame = ctk.CTkFrame(
            parent,
            height=50,
            corner_radius=0,
            fg_color=("gray90", "gray20")
        )
        footer_frame.grid(row=row, column=0, sticky="ew")
        footer_frame.grid_propagate(False)
        footer_frame.grid_columnconfigure(1, weight=1)

        # Logo/Icono peque√±o
        footer_icon = ctk.CTkLabel(
            footer_frame,
            text="‚ö°",
            font=ctk.CTkFont(size=16)
        )
        footer_icon.grid(row=0, column=0, padx=20, pady=0)

        # Informaci√≥n del footer
        footer_info = ctk.CTkLabel(
            footer_frame,
            text="Sistema de Migraci√≥n v1.2 ‚Ä¢ Desarrollado con CustomTkinter - Andy Palma - Cleiber Garcia",
            font=ctk.CTkFont(size=11),
            text_color=("gray50", "gray60")
        )
        footer_info.grid(row=0, column=1, sticky="w", padx=10)

        # Estado de conexi√≥n
        status_dot = ctk.CTkLabel(
            footer_frame,
            text="üü¢ Conectado",
            font=ctk.CTkFont(size=11),
            text_color=("green", "lightgreen")
        )
        status_dot.grid(row=0, column=2, padx=20, pady=0)

    def seleccionar_bd(self):
        """Seleccionar la base de datos SQLite3"""
        ruta = filedialog.askopenfilename(
            title="Seleccione la base de datos SQLite3 de destino",
            filetypes=[
                ("Bases de datos SQLite3", "*.db"),
                ("Bases de datos SQLite3", "*.sqlite"),
                ("Bases de datos SQLite3", "*.sqlite3"),
                ("Todos los archivos", "*.*")
            ],
            parent=self.root
        )

        if ruta:
            self.ruta_bd.set(ruta)
            # Actualizar estado
            self.status_title.configure(text="Base de Datos Configurada")
            self.status_desc.configure(text=f"üìÅ {os.path.basename(ruta)}")

    def mostrar_progreso(self, mostrar=True):
        """Mostrar u ocultar la secci√≥n de progreso"""
        if mostrar:
            self.progress_container.grid()
            self.progress_bar.set(0)
            self.progreso_visible = True
        else:
            self.progress_container.grid_remove()
            self.progreso_visible = False

    def actualizar_progreso(self, valor, texto=""):
        """Actualizar la barra de progreso con animaci√≥n"""
        if self.progreso_visible:
            self.progress_bar.set(valor)
            percentage = int(valor * 100)
            self.progress_percentage.configure(text=f"{percentage}%")
            
            if texto:
                self.progress_label.configure(text=texto)
            
            # Cambiar color de la barra seg√∫n el progreso
            if valor < 0.3:
                self.progress_bar.configure(progress_color=self.colors['warning'])
            elif valor < 0.7:
                self.progress_bar.configure(progress_color=self.colors['secondary'])
            else:
                self.progress_bar.configure(progress_color=self.colors['success'])
                
            self.root.update_idletasks()

    def mostrar_resultados(self, exito, conteo, ruta_bd, tabla):
        """Mostrar los resultados de la migraci√≥n con dise√±o moderno"""
        self.resultados_container.grid()

        # Configurar header seg√∫n resultado
        if exito:
            self.resultado_header.configure(fg_color=self.colors['success'])
            self.resultado_titulo.configure(text="üéâ Migraci√≥n Exitosa")
        else:
            self.resultado_header.configure(fg_color=self.colors['error'])
            self.resultado_titulo.configure(text="‚ùå Error en Migraci√≥n")

        # Limpiar √°rea de texto
        self.resultado_texto.delete("1.0", "end")

        # Preparar el texto de resultados con formato moderno
        estado_emoji = "üéä" if exito else "‚ö†Ô∏è"
        estado_texto = "COMPLETADA EXITOSAMENTE" if exito else "FALL√ì"
        
        tabla_nombres = {
            'ALM': 'Alumnos üë•',
            'CC': 'Carga Curricular üìö',
            'DCT': 'Docentes üë®‚Äçüè´',
            'INS': 'Inscripciones üìù',
            'SEA': 'Secciones üè´'
        }

        resultado = f"""{estado_emoji} REPORTE DE MIGRACI√ìN {estado_emoji}

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        INFORMACI√ìN GENERAL                    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üìÅ Base de datos: {os.path.basename(ruta_bd):<30}
‚ïë üìç Ruta completa: {ruta_bd}
‚ïë üìä Tabla migrada: {tabla_nombres.get(tabla, tabla):<30}
‚ïë üìà Estado: {estado_texto:<40}
‚ïë üìã Registros procesados: {conteo:<25}
‚ïë ‚è∞ Fecha: {self.obtener_fecha_actual():<35}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

{self.generar_estadisticas_adicionales(exito, conteo)}

{'üéØ MIGRACI√ìN COMPLETADA CON √âXITO' if exito else 'üîß REVISE LOS ERRORES PARA M√ÅS INFORMACI√ìN'}
{'‚ú® Todos los datos se han transferido correctamente' if exito else 'üìã Consulte el archivo de log para detalles espec√≠ficos'}

{self.generar_recomendaciones(exito)}"""

        # Insertar el texto con colores
        self.resultado_texto.insert("1.0", resultado)

    def obtener_fecha_actual(self):
        """Obtener fecha y hora actual formateada"""
        from datetime import datetime
        return datetime.now().strftime("%d/%m/%Y %H:%M:%S")

    def generar_estadisticas_adicionales(self, exito, conteo):
        """Generar estad√≠sticas adicionales para el reporte"""
        if exito:
            return f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         ESTAD√çSTICAS                         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚úÖ Registros procesados exitosamente: {conteo:<15}
‚ïë üöÄ Velocidad promedio: Alta                                 ‚ïë
‚ïë üíæ Integridad de datos: Verificada                          ‚ïë
‚ïë üîí Estado de la BD: Actualizada                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""
        else:
            return f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                       INFORMACI√ìN DE ERROR                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚ùå Registros procesados antes del error: {conteo:<10}
‚ïë üîç Estado de la BD: Verificar integridad                    ‚ïë
‚ïë üìù Log de errores: Disponible                               ‚ïë
‚ïë üîÑ Reintentos recomendados: S√≠                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"""

    def generar_recomendaciones(self, exito):
        """Generar recomendaciones seg√∫n el resultado"""
        if exito:
            return """
üí° RECOMENDACIONES POST-MIGRACI√ìN:
‚ñ∂Ô∏è Verifique los datos en la base de datos
‚ñ∂Ô∏è Realice una copia de seguridad del archivo SQLite
‚ñ∂Ô∏è Actualice sus aplicaciones para usar la nueva BD
‚ñ∂Ô∏è Considere programar migraciones autom√°ticas futuras

üéä ¬°Felicidades! La migraci√≥n se complet√≥ sin problemas."""
        else:
            return """
üîß PASOS PARA SOLUCIONAR PROBLEMAS:
‚ñ∂Ô∏è Revise el archivo de log detallado
‚ñ∂Ô∏è Verifique los permisos de archivo
‚ñ∂Ô∏è Confirme que los archivos Excel est√©n accesibles
‚ñ∂Ô∏è Aseg√∫rese de que la BD no est√© siendo usada por otra aplicaci√≥n
‚ñ∂Ô∏è Contacte al administrador si el problema persiste

üìû ¬øNecesita ayuda? Consulte la documentaci√≥n t√©cnica."""

    def ejecutar_migracion_hilo(self):
        """Ejecutar la migraci√≥n en un hilo separado"""
        try:
            # Actualizar progreso inicial
            self.actualizar_progreso(0.05, "üîÑ Inicializando sistema de migraci√≥n...")
            
            # Obtener datos
            tabla = self.tabla_seleccionada.get()
            ruta_bd = self.ruta_bd.get()

            # Diccionario de migradores
            migradores = {
                'ALM': MigradorALM,
                'CC': MigradorCC,
                'DCT': MigradorDCT,
                'INS': MigradorINS,
                'SEA': MigradorSEA
            }

            self.actualizar_progreso(0.15, f"üèóÔ∏è Configurando migrador para {tabla}...")
            
            # Crear el migrador
            migrador = migradores[tabla](ruta_bd)
            
            self.actualizar_progreso(0.25, "üìä Analizando estructura de datos...")
            
            # Simular pasos adicionales para mejor UX
            import time
            time.sleep(0.5)
            
            self.actualizar_progreso(0.40, "üìã Validando archivos de origen...")
            time.sleep(0.3)
            
            self.actualizar_progreso(0.55, "üîÑ Ejecutando migraci√≥n de datos...")
            
            # Ejecutar la migraci√≥n real
            exito, conteo = migrador.ejecutar_migracion()
            
            self.actualizar_progreso(0.85, "‚úÖ Verificando integridad de datos...")
            time.sleep(0.3)
            
            self.actualizar_progreso(0.95, "üìù Generando reporte final...")
            time.sleep(0.2)
            
            self.actualizar_progreso(1.0, "üéâ ¬°Migraci√≥n completada!")

            # Mostrar resultados en el hilo principal
            self.root.after(800, lambda: self.finalizar_migracion(exito, conteo, ruta_bd, tabla))

        except Exception as e:
            # Manejar errores
            self.root.after(0, lambda: self.mostrar_error(f"Error durante la migraci√≥n: {str(e)}"))

    def finalizar_migracion(self, exito, conteo, ruta_bd, tabla):
        """Finalizar la migraci√≥n y mostrar resultados"""
        # Ocultar progreso
        self.mostrar_progreso(False)

        # Reactivar bot√≥n con animaci√≥n
        self.btn_migrar.configure(
            state="normal", 
            text="üöÄ Iniciar Migraci√≥n",
            fg_color=self.colors['success']
        )

        # Actualizar estado del sistema
        if exito:
            self.status_title.configure(text="‚úÖ Migraci√≥n Exitosa")
            self.status_desc.configure(text=f"Procesados: {conteo} registros")
        else:
            self.status_title.configure(text="‚ùå Error en Migraci√≥n")
            self.status_desc.configure(text="Revisar logs para m√°s detalles")

        # Mostrar resultados
        self.mostrar_resultados(exito, conteo, ruta_bd, tabla)

        # Mostrar mensaje con estilo
        if exito:
            self.mostrar_mensaje_exitoso(conteo, tabla)
        else:
            self.mostrar_mensaje_error()

    def mostrar_mensaje_exitoso(self, conteo, tabla):
        """Mostrar mensaje de √©xito personalizado"""
        tabla_nombres = {
            'ALM': 'Alumnos',
            'CC': 'Carga Curricular',
            'DCT': 'Docentes',
            'INS': 'Inscripciones',
            'SEA': 'Secciones'
        }
        
        messagebox.showinfo(
            "üéâ ¬°Migraci√≥n Exitosa!",
            f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ        MIGRACI√ìN COMPLETADA         ‚îÇ\n"
            f"‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            f"‚îÇ ‚úÖ Estado: Exitosa                  ‚îÇ\n"
            f"‚îÇ üìä Tabla: {tabla_nombres.get(tabla, tabla):<23} ‚îÇ\n"
            f"‚îÇ üìà Registros: {conteo:<19} ‚îÇ\n"
            f"‚îÇ üéØ Integridad: Verificada           ‚îÇ\n"
            f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            f"üöÄ ¬°Su base de datos est√° lista para usar!"
        )

    def mostrar_mensaje_error(self):
        """Mostrar mensaje de error personalizado"""
        messagebox.showerror(
            "‚ùå Error en Migraci√≥n",
            f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ         MIGRACI√ìN FALLIDA           ‚îÇ\n"
            f"‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            f"‚îÇ ‚ùå Estado: Error                    ‚îÇ\n"
            f"‚îÇ üìã Logs: Disponibles                ‚îÇ\n"
            f"‚îÇ üîß Acci√≥n: Revisar configuraci√≥n   ‚îÇ\n"
            f"‚îÇ üìû Soporte: Disponible              ‚îÇ\n"
            f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            f"üîç Revise el reporte detallado para m√°s informaci√≥n."
        )

    def mostrar_error(self, mensaje):
        """Mostrar un error del sistema"""
        self.mostrar_progreso(False)
        self.btn_migrar.configure(
            state="normal", 
            text="üöÄ Iniciar Migraci√≥n",
            fg_color=self.colors['success']
        )
        
        # Actualizar estado
        self.status_title.configure(text="‚ö†Ô∏è Error del Sistema")
        self.status_desc.configure(text="Revisar configuraci√≥n")
        
        messagebox.showerror(
            "‚ö†Ô∏è Error del Sistema", 
            f"Se produjo un error inesperado:\n\n{mensaje}\n\n"
            f"üí° Sugerencias:\n"
            f"‚Ä¢ Verificar permisos de archivo\n"
            f"‚Ä¢ Comprobar rutas de acceso\n"
            f"‚Ä¢ Reiniciar la aplicaci√≥n"
        )

    def iniciar_migracion(self):
        """Iniciar el proceso de migraci√≥n con validaciones mejoradas"""
        # Validaci√≥n de base de datos
        if not self.ruta_bd.get():
            messagebox.showerror(
                "‚ùå Error de Configuraci√≥n",
                "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                "‚îÇ        CONFIGURACI√ìN FALTANTE       ‚îÇ\n"
                "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
                "‚îÇ üìÅ Base de datos: No seleccionada  ‚îÇ\n"
                "‚îÇ üéØ Acci√≥n requerida: Seleccionar   ‚îÇ\n"
                "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
                "Por favor seleccione una base de datos SQLite3"
            )
            return

        if not os.path.exists(self.ruta_bd.get()):
            messagebox.showerror(
                "‚ùå Error de Archivo",
                "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                "‚îÇ         ARCHIVO NO ENCONTRADO       ‚îÇ\n"
                "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
                "‚îÇ üìÅ Archivo: No existe              ‚îÇ\n"
                "‚îÇ üîç Verificar: Ruta de acceso       ‚îÇ\n"
                "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
                "La base de datos seleccionada no existe"
            )
            return

        # Obtener informaci√≥n para confirmaci√≥n
        tabla = self.tabla_seleccionada.get()
        tabla_nombres = {
            'ALM': 'üë• Alumnos',
            'CC': 'üìö Carga Curricular',
            'DCT': 'üë®‚Äçüè´ Docentes',
            'INS': 'üìù Inscripciones',
            'SEA': 'üè´ Secciones'
        }

        nombre_tabla = tabla_nombres.get(tabla, tabla)

        # Di√°logo de confirmaci√≥n moderno
        confirmacion = messagebox.askyesno(
            "üöÄ Confirmar Migraci√≥n",
            f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ           CONFIRMAR MIGRACI√ìN           ‚îÇ\n"
            f"‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            f"‚îÇ üìÅ Base de datos:                       ‚îÇ\n"
            f"‚îÇ   {os.path.basename(self.ruta_bd.get()):<35} ‚îÇ\n"
            f"‚îÇ                                         ‚îÇ\n"
            f"‚îÇ üìä Tabla a migrar:                      ‚îÇ\n"
            f"‚îÇ   {nombre_tabla:<35} ‚îÇ\n"
            f"‚îÇ                                         ‚îÇ\n"
            f"‚îÇ ‚è±Ô∏è Tiempo estimado: 2-5 minutos         ‚îÇ\n"
            f"‚îÇ üîí Operaci√≥n: Segura                    ‚îÇ\n"
            f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            f"¬øDesea continuar con la migraci√≥n?"
        )

        if not confirmacion:
            return

        # Preparar interfaz para migraci√≥n
        self.btn_migrar.configure(
            state="disabled", 
            text="‚è≥ Migrando...",
            fg_color=self.colors['warning']
        )
        
        # Actualizar estado
        self.status_title.configure(text="‚ö° Migraci√≥n en Proceso")
        self.status_desc.configure(text="Por favor espere...")
        
        self.mostrar_progreso(True)

        # Ocultar resultados anteriores
        self.resultados_container.grid_remove()

        # Ejecutar migraci√≥n en hilo separado
        hilo_migracion = threading.Thread(target=self.ejecutar_migracion_hilo)
        hilo_migracion.daemon = True
        hilo_migracion.start()

    def limpiar_campos(self):
        """Limpiar todos los campos con confirmaci√≥n"""
        if messagebox.askyesno(
            "üóëÔ∏è Limpiar Campos",
            "¬øEst√° seguro de que desea limpiar todos los campos?\n\n"
            "Esta acci√≥n restablecer√°:\n"
            "‚Ä¢ Selecci√≥n de base de datos\n"
            "‚Ä¢ Tabla seleccionada\n"
            "‚Ä¢ Resultados mostrados"
        ):
            # Limpiar campos
            self.ruta_bd.set("")
            self.tabla_seleccionada.set("ALM")
            
            # Resetear estado visual
            self.status_title.configure(text="Sistema Preparado")
            self.status_desc.configure(text="Configurar base de datos y tabla")
            
            # Ocultar secciones
            self.mostrar_progreso(False)
            self.resultados_container.grid_remove()
            
            # Resetear selecci√≥n de tabla cards
            for tabla_codigo in ["ALM", "CC", "DCT", "INS", "SEA"]:
                if hasattr(self, f"card_{tabla_codigo}"):
                    card = getattr(self, f"card_{tabla_codigo}")
                    card.configure(
                        border_color=self.colors['card_border'],
                        fg_color=self.colors['card_bg']
                    )
            
            # Seleccionar ALM por defecto
            if hasattr(self, "card_ALM"):
                self.seleccionar_tabla_card(getattr(self, "card_ALM"), "ALM")

    def salir_aplicacion(self):
        """Salir de la aplicaci√≥n con confirmaci√≥n elegante"""
        resultado = messagebox.askyesnocancel(
            "‚ùå Salir de la Aplicaci√≥n",
            "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            "‚îÇ          CONFIRMAR SALIDA           ‚îÇ\n"
            "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            "‚îÇ üö™ ¬øDesea salir de la aplicaci√≥n?  ‚îÇ\n"
            "‚îÇ                                     ‚îÇ\n"
            "‚îÇ ‚úÖ S√≠ - Salir ahora                ‚îÇ\n"
            "‚îÇ ‚ùå No - Continuar trabajando        ‚îÇ\n"
            "‚îÇ üîÑ Cancelar                         ‚îÇ\n"
            "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            "¬øEst√° seguro de que desea salir?"
        )
        
        if resultado:  # True = S√≠
            # Animaci√≥n de cierre (opcional)
            self.root.withdraw()  # Ocultar ventana temporalmente
            
            # Mensaje de despedida
            messagebox.showinfo(
                "üëã ¬°Hasta pronto!",
                "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                "‚îÇ             DESPEDIDA               ‚îÇ\n"
                "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
                "‚îÇ üôè Gracias por usar nuestro sistema ‚îÇ\n"
                "‚îÇ üí´ ¬°Que tenga un excelente d√≠a!    ‚îÇ\n"
                "‚îÇ üöÄ Versi√≥n 1.2 - 2025              ‚îÇ\n"
                "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
            )
            
            # Cerrar aplicaci√≥n
            self.root.quit()
            self.root.destroy()

    def ejecutar(self):
        """Ejecutar la aplicaci√≥n con manejo de errores"""
        try:
            # Iniciar loop principal (removimos el splash screen que podr√≠a causar problemas)
            self.root.mainloop()
            
        except Exception as e:
            messagebox.showerror(
                "üí• Error Fatal del Sistema",
                f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                f"‚îÇ           ERROR CR√çTICO             ‚îÇ\n"
                f"‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
                f"‚îÇ ‚ö†Ô∏è Error: {str(e)[:25]:<25} ‚îÇ\n"
                f"‚îÇ üìã C√≥digo: Sistema                  ‚îÇ\n"
                f"‚îÇ üîß Soluci√≥n: Reiniciar aplicaci√≥n  ‚îÇ\n"
                f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
                f"Error t√©cnico: {str(e)}"
            )


def main():
    """Funci√≥n principal mejorada"""
    try:
        # Crear y ejecutar aplicaci√≥n
        app = SistemaMigracionApp()
        app.ejecutar()
        
    except Exception as e:
        # Error durante la inicializaci√≥n
        messagebox.showerror(
            "üí• Error de Inicializaci√≥n",
            f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            f"‚îÇ        ERROR DE INICIALIZACI√ìN      ‚îÇ\n"
            f"‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
            f"‚îÇ ‚ùå No se pudo iniciar la aplicaci√≥n ‚îÇ\n"
            f"‚îÇ üîç Error: {str(e)[:23]:<23} ‚îÇ\n"
            f"‚îÇ üí° Soluci√≥n: Verificar dependencias ‚îÇ\n"
            f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            f"Detalles t√©cnicos: {str(e)}\n\n"
            f"Posibles causas:\n"
            f"‚Ä¢ CustomTkinter no instalado correctamente\n"
            f"‚Ä¢ Archivos de migrador faltantes\n"
            f"‚Ä¢ Permisos de sistema insuficientes\n"
            f"‚Ä¢ Versi√≥n incompatible de CustomTkinter"
        )


if __name__ == "__main__":
    main()
    